})
}
runGadget(ui, server)
}
myFirstGadget(1:10,1:10)
stopApp(num1 * num2)
observeEvent(input$done, {
num1 <- as.numeric(input$num1)
num2 <- as.numeric(input$num2)
stopApp(num1 * num2)
})
server <- function(input, output, session){
observeEvent(input$done, {
num1 <- as.numeric(input$num1)
num2 <- as.numeric(input$num2)
stopApp(num1 * num2)
})
}
myFirstGadget(1:10, 1:10)
ui <- miniUI::miniPage(
gadgetTitleBar("Multiply Two Number"),
miniContentPanel(
selectInput("num1", "First Number", choices = number1),
selectInput("num2", "Second Number", choices = number2)
)
)
library(miniUI)
myFirstGadget <- function(number1, number2){
ui <- miniPage(
gadgetTitleBar("Multiply Two Number"),
miniContentPanel(
selectInput("num1", "First Number", choices = number1),
selectInput("num2", "Second Number", choices = number2)
)
)
server <- function(input, output, session){
observeEvent(input$done, {
num1 <- as.numeric(input$num1)
num2 <- as.numeric(input$num2)
stopApp(num1 * num2)
})
}
runGadget(ui, server)
}
myFirstGadget(1:10, 1:10
)
myFirstGadget <- function(number1, number2){
ui <- miniPage(
gadgetTitleBar("Multiply Two Number"),
miniContentPanel(
selectInput("num1", "First Number", choices = number1),
selectInput("num2", "Second Number", choices = number2)
)
)
server <- function(input, output, session){
observeEvent(input$done, {
num1 <- as.numeric(input$num1)
num2 <- as.numeric(input$num2)
stopApp(num1 * num2)
})
}
runGadget(ui, server)
}
myFirstGadget(1:10, 1:10)
myFirstGadget(1:10, 1:10)
library(shiny)
library(miniUI)
myFirstGadget <- function(number1, number2){
ui <- miniPage(
gadgetTitleBar("Multiply Two Number"),
miniContentPanel(
selectInput("num1", "First Number", choices = number1),
selectInput("num2", "Second Number", choices = number2)
)
)
server <- function(input, output, session){
observeEvent(input$done, {
num1 <- as.numeric(input$num1)
num2 <- as.numeric(input$num2)
stopApp(num1 * num2)
})
}
runGadget(ui, server)
}
myFirstGadget(1:10, 1:10)
library(shiny)
library(miniUI)
myFirstGadget <- function(number1, number2){
ui <- miniPage(
gadgetTitleBar("Multiply Two Number"),
miniContentPanel(
selectInput("num1", "First Number", choices = number1),
selectInput("num2", "Second Number", choices = number2)
)
)
server <- function(input, output, session){
observeEvent(input$done, {
num1 <- as.numeric(input$num1)
num2 <- as.numeric(input$num2)
stopApp(num1 * num2)
})
}
runGadget(ui, server)
}
myFirstGadget(1:10, 1:10)
library(shiny)
library(miniUI)
myFirstGadget <- function(number1, number2){
ui <- miniPage(
gadgetTitleBar("Select Your Points"),
miniContentPanel(
plotOutput("plot", height = "100%", brush = "brush")
)
)
server <- function(input, output, session){
output$plot <- renderPlot({
plot(trees$Girth, trees$Volume, xlab = "Girth", ylab = "Volume")
})
observeEvent(input$done, {
stopApp(brushedPoints(trees, input$brush, xvar = "Girth", yvar = "Volume"))
})
}
runGadget(ui, server)
}
library(shiny)
library(miniUI)
myFirstGadget <- function(){
ui <- miniPage(
gadgetTitleBar("Select Your Points"),
miniContentPanel(
plotOutput("plot", height = "100%", brush = "brush")
)
)
server <- function(input, output, session){
output$plot <- renderPlot({
plot(trees$Girth, trees$Volume, xlab = "Girth", ylab = "Volume")
})
observeEvent(input$done, {
stopApp(brushedPoints(trees, input$brush, xvar = "Girth", yvar = "Volume"))
})
}
runGadget(ui, server)
}
myFirstGadget()
library(shiny)
library(miniUI)
myFirstGadget <- function(){
ui <- miniPage(
gadgetTitleBar("Select Your Points"),
miniContentPanel(
plotOutput("plot", height = "100%", brush = "brush")
)
)
server <- function(input, output, session){
model <- lm(Girth ~ Volume, data = trees)
output$plot <- renderPlot({
plot(trees$Girth, trees$Volume, xlab = "Girth", ylab = "Volume")
})
observeEvent(input$done, {
stopApp(brushedPoints(trees, input$brush, xvar = "Girth", yvar = "Volume"))
})
}
runGadget(ui, server)
}
main_function <- function(){
data_points <- myFirstGadget()
lines(data_points$Girth, data_points$Volume, xlab = "Girth", ylab = "Volume")
}
main_function()
runGadget(ui, server)
library(shiny)
library(miniUI)
myFirstGadget <- function(){
ui <- miniPage(
gadgetTitleBar("Select Your Points"),
miniContentPanel(
plotOutput("plot", height = "100%", brush = "brush")
)
)
server <- function(input, output, session){
model <- lm(Girth ~ Volume, data = trees)
output$plot <- renderPlot({
plot(trees$Girth, trees$Volume, xlab = "Girth", ylab = "Volume")
})
observeEvent(input$done, {
stopApp(brushedPoints(trees, input$brush, xvar = "Girth", yvar = "Volume"))
})
}
runGadget(ui, server)
}
main_function <- function(){
data_points <- myFirstGadget()
lines(data_points$Girth, data_points$Volume, xlab = "Girth", ylab = "Volume")
}
main_function()
library(shiny)
library(miniUI)
myFirstGadget <- function(){
ui <- miniPage(
gadgetTitleBar("Select Your Points"),
miniContentPanel(
plotOutput("plot", height = "100%", brush = "brush")
)
)
server <- function(input, output, session){
model <- lm(Girth ~ Volume, data = trees)
output$plot <- renderPlot({
plot(trees$Girth, trees$Volume, xlab = "Girth", ylab = "Volume")
})
observeEvent(input$done, {
stopApp(brushedPoints(trees, input$brush, xvar = "Girth", yvar = "Volume"))
})
}
runGadget(ui, server)
}
main_function <- function(){
data_points <- myFirstGadget()
window()
lines(data_points$Girth, data_points$Volume, xlab = "Girth", ylab = "Volume")
}
main_function()
library(shiny)
library(miniUI)
myFirstGadget <- function(){
ui <- miniPage(
gadgetTitleBar("Select Your Points"),
miniContentPanel(
plotOutput("plot", height = "100%", brush = "brush")
)
)
server <- function(input, output, session){
model <- lm(Girth ~ Volume, data = trees)
output$plot <- renderPlot({
plot(trees$Girth, trees$Volume, xlab = "Girth", ylab = "Volume")
})
observeEvent(input$done, {
stopApp(brushedPoints(trees, input$brush, xvar = "Girth", yvar = "Volume"))
})
}
runGadget(ui, server)
}
main_function <- function(){
data_points <- myFirstGadget()
dev.off()
lines(data_points$Girth, data_points$Volume, xlab = "Girth", ylab = "Volume")
}
main_function()
library(shiny)
library(miniUI)
myFirstGadget <- function(){
ui <- miniPage(
gadgetTitleBar("Select Your Points"),
miniContentPanel(
plotOutput("plot", height = "100%", brush = "brush")
)
)
server <- function(input, output, session){
model <- lm(Girth ~ Volume, data = trees)
output$plot <- renderPlot({
plot(trees$Girth, trees$Volume, xlab = "Girth", ylab = "Volume")
})
observeEvent(input$done, {
stopApp(brushedPoints(trees, input$brush, xvar = "Girth", yvar = "Volume"))
})
}
runGadget(ui, server)
}
main_function <- function(){
data_points <- myFirstGadget()
plot(data_points$Girth, data_points$Volume, xlab = "Girth", ylab = "Volume")
}
main_function()
library(shiny)
library(miniUI)
myFirstGadget <- function(){
ui <- miniPage(
gadgetTitleBar("Select Your Points"),
miniContentPanel(
plotOutput("plot", height = "100%", brush = "brush")
)
)
server <- function(input, output, session){
model <- lm(Girth ~ Volume, data = trees)
output$plot <- renderPlot({
plot(trees$Girth, trees$Volume, xlab = "Girth", ylab = "Volume")
})
observeEvent(input$done, {
stopApp(brushedPoints(trees, input$brush, xvar = "Girth", yvar = "Volume"))
})
}
runGadget(ui, server)
}
main_function <- function(){
data_points <- myFirstGadget()
plot(type = "n", , xlab = "Girth", ylab = "Volume")
lines(data_points$Girth, data_points$Volume)
}
main_function()
library(shiny)
library(miniUI)
myFirstGadget <- function(){
ui <- miniPage(
gadgetTitleBar("Select Your Points"),
miniContentPanel(
plotOutput("plot", height = "100%", brush = "brush")
)
)
server <- function(input, output, session){
model <- lm(Girth ~ Volume, data = trees)
output$plot <- renderPlot({
plot(trees$Girth, trees$Volume, xlab = "Girth", ylab = "Volume")
})
observeEvent(input$done, {
stopApp(brushedPoints(trees, input$brush, xvar = "Girth", yvar = "Volume"))
})
}
runGadget(ui, server)
}
main_function <- function(){
data_points <- myFirstGadget()
plot(data_points$Girth, data_points$Volume, type = "n", , xlab = "Girth", ylab = "Volume")
lines(data_points$Girth, data_points$Volume)
}
main_function()
library(shiny)
library(miniUI)
myFirstGadget <- function(){
ui <- miniPage(
gadgetTitleBar("Select Your Points"),
miniContentPanel(
plotOutput("plot", height = "100%", brush = "brush")
)
)
server <- function(input, output, session){
model <- lm(Girth ~ Volume, data = trees)
output$plot <- renderPlot({
plot(trees$Girth, trees$Volume, xlab = "Girth", ylab = "Volume")
})
observeEvent(input$done, {
stopApp(brushedPoints(trees, input$brush, xvar = "Girth", yvar = "Volume"))
})
}
runGadget(ui, server)
}
main_function <- function(){
data_points <- myFirstGadget()
plot(data_points$Girth, data_points$Volume, type = "n", , xlab = "Girth", ylab = "Volume")
lines(data_points$Girth, data_points$Volume)
points(data_points$Girth, data_points$Volume, pch = 16)
}
main_function()
install.packages("googleVis")
library(googleVis)
Fruits
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
print(M)
plot(M)
plot(M)
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
plot(M)
print(M)
plot(M)
plot.default(M)
plot(M)
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
plot(M)
plot(M)
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
plot(M)
M <- gvisMotionChart(Fruits, "Fruit", "Year",options = list(width = 600, height = 400))
plot(M)
G2 <- gvisGeoChart(Exports, locationvar = "Country", colorvar = "Profit", options = list(width = 600, height = 400))
print(G2, "chart")
plot(G2)
G2 <- gvisGeoChart(Exports, locationvar = "Country", colorvar = "Profit", options = list(width = 600, height = 400))
M <- gvisMotionChart(Fruits, "Fruit", "Year",options = list(width = 600, height = 400))
plot(M)
plot(G2)
T1 <- gvisTable(Exports, options = list(width = 600, height = 400))
GT <- gvisMerge(G2, T1)
plot(GT)
GT <- gvisMerge(G2, T1, horizontal = FALSE)
plot(GT)
download.file(url = "https://drive.google.com/file/d/19BOhwz52NUY3dg8XErVYglctpr5sjTy4/view", destfile = "customerseg.csv")
data = read.csv("customerseg.csv")
str(data)
View(data)
View(data)
getwd()
data = read.csv("Mall_Customers.csv")
str(data)
summary(data)
names(data)
z <- kmeans(data[, 2:5], 5, algorithm = "Lloyd")
z <- kmeans(data[, 3:5], 5, algorithm = "Lloyd")
str(z)
z$tot.withinss
library(caret)
setwd("C:/Users/PIYUSH/Desktop/Projects/Customer Segmentation using R")
cus_data <- read.csv("Mall_Customers.csv")
install.packages("cluster")
library(cluster)
gap <- clusGap(cus_data[, 3:5], FUN = kmeans, nstart = 25, K.max = 10, B = 50)
View(gap)
fviz_gap_stat(gap)
fviz_gap_stat(gap)
library(cluster)
fviz_gap_stat(gap)
stat_gap <- clusGap(cusdata[,3:5], FUN = kmeans, nstart = 25,
K.max = 10, B = 50)
stat_gap <- clusGap(cus_data[,3:5], FUN = kmeans, nstart = 25,
K.max = 10, B = 50)
fviz_gap_stat(stat_gap)
set.seed(125)
stat_gap <- clusGap(cus_data[,3:5], FUN = kmeans, nstart = 25,
K.max = 10, B = 50)
fviz_gap_stat(stat_gap)
install.packages("factoextra")
library(factoextra)
fviz_gap_stat(stat_gap)
z<-fviz_gap_stat(stat_gap)
View(z)
summary(z)
z$plot_env
library(cluster);library(factoextra);gap_station <- clusGap(cus_data[,3:5], FUN=kmeans, K.max = 10, nstart=25, B = 50);fviz_gap_stat(gap_station)
View(cus_data)
View(cus_data)
library(cluster)
cus_data <- read.csv("Mall_Customers.csv")
##To Calculate the number of cluster to be used in Kmeans, run the following code to observe the variation of number of clusters with Gap station for optimal number of cluster
##library(cluster);library(factoextra);gap_station <- clusGap(cus_data[,3:5], FUN=kmeans, K.max = 10, nstart=25, B = 50);fviz_gap_stat(gap_station)
k6 <- kmeans(cus_data[, 3:5], 6, algorithm = "Lloyd", nstart = 25, iter.max = 100)
par(mfrow = c(1,2))
ggplot(data = cus_data, aes(x = Annual.Income..k.., y = Spending.Score..1.100.))+geom_point(stat = "identity", aes(color = as.factor(h6$cluster)))+scale_color_discrete(names="", breaks("1", "2", "3", "4", "5", "6"), labels("Cluster 1","Cluster 2","Cluster 3","Cluster 4","Cluster 5","Cluster 6"))
library(cluster)
cus_data <- read.csv("Mall_Customers.csv")
##To Calculate the number of cluster to be used in Kmeans, run the following code to observe the variation of number of clusters with Gap station for optimal number of cluster
##library(cluster);library(factoextra);gap_station <- clusGap(cus_data[,3:5], FUN=kmeans, K.max = 10, nstart=25, B = 50);fviz_gap_stat(gap_station)
k6 <- kmeans(cus_data[, 3:5], 6, algorithm = "Lloyd", nstart = 25, iter.max = 100)
par(mfrow = c(1,2))
ggplot(data = cus_data, aes(x = Annual.Income..k.., y = Spending.Score..1.100.))+geom_point(stat = "identity", aes(color = as.factor(h6$cluster)))
ggplot(data = cus_data, aes(x = Annual.Income..k.., y = Spending.Score..1.100.))+geom_point(stat = "identity", aes(color = as.factor(k6$cluster)))
ggplot(data = cus_data, aes(x = Annual.Income..k.., y = Spending.Score..1.100.))+geom_point(stat = "identity", aes(color = as.factor(k6$cluster)))+scale_color_discrete(names="", breaks=c("1", "2", "3", "4", "5", "6"), labels =c("Cluster 1","Cluster 2","Cluster 3","Cluster 4","Cluster 5","Cluster 6"))
ggplot(data = cus_data, aes(x = Annual.Income..k.., y = Spending.Score..1.100.))+geom_point(stat = "identity", aes(color = as.factor(k6$cluster)))+scale_color_discrete(names=" ", breaks=c("1", "2", "3", "4", "5", "6"), labels =c("Cluster 1","Cluster 2","Cluster 3","Cluster 4","Cluster 5","Cluster 6"))
ggplot(data = cus_data, aes(x = Annual.Income..k.., y = Spending.Score..1.100.))+geom_point(stat = "identity", aes(color = as.factor(k6$cluster)))+scale_color_discrete(name=" ", breaks=c("1", "2", "3", "4", "5", "6"), labels =c("Cluster 1","Cluster 2","Cluster 3","Cluster 4","Cluster 5","Cluster 6"))
cus_data$Spending.Score..1.100.
ggplot(data = cus_data, aes(x = Spending.Score..1.100., y = Age))+geom_point(stat = "identity", aes(color = as.factor(k6$cluster)))+scale_color_discrete(name=" ", breaks=c("1", "2", "3", "4", "5", "6"), labels =c("Cluster 1","Cluster 2","Cluster 3","Cluster 4","Cluster 5","Cluster 6"))
ggplot(data = cus_data, aes(x = Age, y = Spending.Score..1.100.))+geom_point(stat = "identity", aes(color = as.factor(k6$cluster)))+scale_color_discrete(name=" ", breaks=c("1", "2", "3", "4", "5", "6"), labels =c("Cluster 1","Cluster 2","Cluster 3","Cluster 4","Cluster 5","Cluster 6"))
grid.arrange(plot1, plot2, ncol = 2)
grid.arrange(plot1, plot2, ncol=2)
grid.arrange(plot1, plot2)
Spending.Score..1.100.
ggsave("foo.pdf", arrangeGrob(plot1,plot2))
grid.arrange(plot1, plot2, ncol= 2)
library(cluster)
library(gridExtra)
library(grid)
library(ggplot2)
library(lattice)
cus_data <- read.csv("Mall_Customers.csv")
k6 <- kmeans(cus_data[, 3:5], 6, algorithm = "Lloyd", nstart = 25, iter.max = 100)
library(cluster)
library(gridExtra)
library(grid)
library(ggplot2)
library(lattice)
cus_data <- read.csv("Mall_Customers.csv")
##To Calculate the number of cluster to be used in Kmeans, run the following code to observe the variation of number of clusters with Gap station for optimal number of cluster
##library(cluster);library(factoextra);gap_station <- clusGap(cus_data[,3:5], FUN=kmeans, K.max = 10, nstart=25, B = 50);fviz_gap_stat(gap_station)
k6 <- kmeans(cus_data[, 3:5], 6, algorithm = "Lloyd", nstart = 25, iter.max = 100)
require(gridExtra)
plot1 <- ggplot(data = cus_data, aes(x = Annual.Income..k.., y = Spending.Score..1.100.))+geom_point(stat = "identity", aes(color = as.factor(k6$cluster)))+scale_color_discrete(name=" ", breaks=c("1", "2", "3", "4", "5", "6"), labels =c("Cluster 1","Cluster 2","Cluster 3","Cluster 4","Cluster 5","Cluster 6"))
plot2 <- ggplot(data = cus_data, aes(x = Age, y = Spending.Score..1.100.))+geom_point(stat = "identity", aes(color = as.factor(k6$cluster)))+scale_color_discrete(name=" ", breaks=c("1", "2", "3", "4", "5", "6"), labels =c("Cluster 1","Cluster 2","Cluster 3","Cluster 4","Cluster 5","Cluster 6"))
grid.arrange(plot1, plot2, ncol= 2)
library(cluster)
cus_data <- read.csv("Mall_Customers.csv")
##To Calculate the number of cluster to be used in Kmeans, run the following code to observe the variation of number of clusters with Gap station for optimal number of cluster
##library(cluster);library(factoextra);gap_station <- clusGap(cus_data[,3:5], FUN=kmeans, K.max = 10, nstart=25, B = 50);fviz_gap_stat(gap_station)
k6 <- kmeans(cus_data[, 3:5], 6, algorithm = "Lloyd", nstart = 25, iter.max = 100)
require(gridExtra)
plot1 <- ggplot(data = cus_data, aes(x = Annual.Income..k.., y = Spending.Score..1.100.))+geom_point(stat = "identity", aes(color = as.factor(k6$cluster)))+scale_color_discrete(name=" ", breaks=c("1", "2", "3", "4", "5", "6"), labels =c("Cluster 1","Cluster 2","Cluster 3","Cluster 4","Cluster 5","Cluster 6"))
plot2 <- ggplot(data = cus_data, aes(x = Age, y = Spending.Score..1.100.))+geom_point(stat = "identity", aes(color = as.factor(k6$cluster)))+scale_color_discrete(name=" ", breaks=c("1", "2", "3", "4", "5", "6"), labels =c("Cluster 1","Cluster 2","Cluster 3","Cluster 4","Cluster 5","Cluster 6"))
grid.arrange(plot1, plot2, ncol= 2)
library(cluster)
cus_data <- read.csv("Mall_Customers.csv")
##To Calculate the number of cluster to be used in Kmeans, run the following code to observe the variation of number of clusters with Gap station for optimal number of cluster
##library(cluster);library(factoextra);gap_station <- clusGap(cus_data[,3:5], FUN=kmeans, K.max = 10, nstart=25, B = 50);fviz_gap_stat(gap_station)
k6 <- kmeans(cus_data[, 3:5], 6, algorithm = "Lloyd", nstart = 25, iter.max = 100)
require(gridExtra)
plot1 <- ggplot(data = cus_data, aes(x = Annual.Income..k.., y = Spending.Score..1.100.))+geom_point(stat = "identity", aes(color = as.factor(k6$cluster)))+scale_color_discrete(name=" ", breaks=c("1", "2", "3", "4", "5", "6"), labels =c("Cluster 1","Cluster 2","Cluster 3","Cluster 4","Cluster 5","Cluster 6"))
plot2 <- ggplot(data = cus_data, aes(x = Age, y = Spending.Score..1.100.))+geom_point(stat = "identity", aes(color = as.factor(k6$cluster)))+scale_color_discrete(name=" ", breaks=c("1", "2", "3", "4", "5", "6"), labels =c("Cluster 1","Cluster 2","Cluster 3","Cluster 4","Cluster 5","Cluster 6"))
grid.arrange(plot1, plot2, ncol= 2)
library(cluster)
cus_data <- read.csv("Mall_Customers.csv")
##To Calculate the number of cluster to be used in Kmeans, run the following code to observe the variation of number of clusters with Gap station for optimal number of cluster
##library(cluster);library(factoextra);gap_station <- clusGap(cus_data[,3:5], FUN=kmeans, K.max = 10, nstart=25, B = 50);fviz_gap_stat(gap_station)
k6 <- kmeans(cus_data[, 3:5], 6, algorithm = "Lloyd", nstart = 25, iter.max = 100)
require(gridExtra)
plot1 <- ggplot(data = cus_data, aes(x = Annual.Income..k.., y = Spending.Score..1.100.))+geom_point(stat = "identity", aes(color = as.factor(k6$cluster)))+scale_color_discrete(name=" ", breaks=c("1", "2", "3", "4", "5", "6"), labels =c("Cluster 1","Cluster 2","Cluster 3","Cluster 4","Cluster 5","Cluster 6"))
plot2 <- ggplot(data = cus_data, aes(x = Age, y = Spending.Score..1.100.))+geom_point(stat = "identity", aes(color = as.factor(k6$cluster)))+scale_color_discrete(name=" ", breaks=c("1", "2", "3", "4", "5", "6"), labels =c("Cluster 1","Cluster 2","Cluster 3","Cluster 4","Cluster 5","Cluster 6"))
grid.arrange(plot1, plot2, ncol= 2)
library(cluster)
cus_data <- read.csv("Mall_Customers.csv")
##To Calculate the number of cluster to be used in Kmeans, run the following code to observe the variation of number of clusters with Gap station for optimal number of cluster
##library(cluster);library(factoextra);gap_station <- clusGap(cus_data[,3:5], FUN=kmeans, K.max = 10, nstart=25, B = 50);fviz_gap_stat(gap_station)
k6 <- kmeans(cus_data[, 3:5], 6, algorithm = "Lloyd", nstart = 25, iter.max = 100)
require(gridExtra)
plot1 <- ggplot(data = cus_data, aes(x = Annual.Income..k.., y = Spending.Score..1.100.))+geom_point(stat = "identity", aes(color = as.factor(k6$cluster)))+scale_color_discrete(name=" ", breaks=c("1", "2", "3", "4", "5", "6"), labels =c("Cluster 1","Cluster 2","Cluster 3","Cluster 4","Cluster 5","Cluster 6"))
plot2 <- ggplot(data = cus_data, aes(x = Age, y = Spending.Score..1.100.))+geom_point(stat = "identity", aes(color = as.factor(k6$cluster)))+scale_color_discrete(name=" ", breaks=c("1", "2", "3", "4", "5", "6"), labels =c("Cluster 1","Cluster 2","Cluster 3","Cluster 4","Cluster 5","Cluster 6"))
grid.arrange(plot1, plot2, ncol= 2)
